#!/usr/bin/env python3

import os
import sys
import hashlib

# Constant: Path to the configuration file
CONF_PATH = os.path.expanduser("~/.h256")

# Initialize the configuration file if it does not exist
def initialize_conf():
    if not os.path.exists(CONF_PATH):
        print(f"Creating {CONF_PATH} file...")
        try:
            # Write without newline
            with open(CONF_PATH, 'w') as f:
                f.write("secret")
            os.chmod(CONF_PATH, 0o600)  # Restrictive permissions (600)
            print("Done.")
        except Exception as e:
            die(f"Failed to initialize configuration: {e}")

# Read the secret from the configuration file
def read_secret():
    if not os.path.exists(CONF_PATH):
        die("Error: Configuration file not found.")
    try:
        with open(CONF_PATH, 'r') as f:
            # Read entire content and remove trailing newlines
            secret = f.read().rstrip('\n')
        if not secret:
            die("Error: Configuration file is empty.")
        return secret
    except Exception as e:
        die(f"Failed to read the configuration file: {e}")

# Generate a SHA-256 hash
def generate_hash(secret, value):
    try:
        # Concatenate the value and the secret with "++"
        to_hash = f"{value}++{secret}".encode('utf-8')
        # Compute the SHA-256 hash
        hash_hex = hashlib.sha256(to_hash).hexdigest()
        return hash_hex
    except Exception as e:
        die(f"Failed to generate hash: {e}")

# Handle errors and terminate
def die(message):
    print(message, file=sys.stderr)
    sys.exit(1)

# Main function
def main():
    # Use an empty string if no argument is provided
    value = sys.argv[1] if len(sys.argv) > 1 else ""

    # Initialize the configuration file if needed
    initialize_conf()

    # Read the secret from the configuration file
    secret = read_secret()

    # Generate and print the hash
    print(generate_hash(secret, value))

# Script entry point
if __name__ == "__main__":
    main()
